/*
 * renderTable - converts SQLite row output into HTML tables
 *
 * usage: 
 *
 *	htmlString = require('renderTable').tableToHTML(rows);
 *
 *
 *
 */

var jaml = require('jaml');

/*
 * cellToString(cell)
 *	converts cell to string, takeing care of the case where 
 *	cell is null
 *
 */
var cellToString = function (cell) {
    if (cell !== null) {
        return cell.toString();
    } else {
        return "null";
    }
};

/*
 * Various Jaml templates to accepted the array structure created by
 *     getHeader(), getData(), and tableToHTML()
 *
 *
 */


/* Jaml.render('tableheader', header)
 * returns a string = "<th>" + header + "</th>"
 * or, in the case that header is an array
 *	string = "<th>" + header[0] + "</th>"
 *	    + "<th>" + header[1] + "</th>"
 *	    ...
 *	    + "<th>" + header[n] + "</th>"
 */
Jaml.register('tableheader', function (header) {
    th(header.toString());
});

/* Jaml.render('tablerow', row)
 * returns a string = "<tr>" + ...rendered <td></td> cell...  + "</tr>"
 * or, in the case that row is an array, multiple rows are rendered
 * as above.
 */
Jaml.register('tablerow', function (row) {
    tr(Jaml.render('tablecell', row));
});

/* Jaml.render('tablecell', cell)
 * returns a string = "<td>" + cell + "</td>"
 * or, in the case that cell is an array, multiple cells are rendered
 * as above.
 */
Jaml.register('tablecell', function (cell) {
    td(cell);
});

/* Jaml.render('table', input)
 * Receives an object of the form input = {head: String[]; rows: String[][]}
 * A table is rendered from this, applying the above Jaml templates.
 */
Jaml.register('table', function (input) {
    table({border: 1, cellpadding: 1},
        tr(Jaml.render('tableheader', input.head)),
        Jaml.render('tablerow', input.rows));
});


/*
 * getHeader(row)
 *    extracts from row, the SQLite output, and extracts column names
 *    returning them in a array of strings.
 *
 */

module.exports.getHeader = function (row) {
    var header = [];
    var key;

    for (key in row[0]) {
        if (row[0].hasOwnProperty(key)) {
            header[header.length] = key;
        }
    }
    
    return header;
};

/*
 * getData(row)
 *     extracts from row, the SQLite output, and extracts data
 *     and creates an array from each row, returning an array of these 
 *     arrays.
 *
 */

module.exports.getData = function (row) {
    var data = [[]];
    var i, j;
    
    for (i = 0; i < row.length; i++) {
        data[i] = [];
        for (j in row[i]) {
            if (row[i].hasOwnProperty(j)) {
                data[i][data[i].length] = cellToString(row[i][j]);
            }
        }
    }

    return data;
};

/*
 * tableToHTML(row)
 *     uses getHeader() and getData() to extract the data from
 *     the SQLite output and submits it to the Jaml templates
 *     to be rendered into an HTML table.
 */
module.exports.tableToHTML = function (row) {
    if ((row === undefined) || (row.length <= 0)) { return ""; }

    var inputobj = {head: module.exports.getHeader(row), 
            rows: module.exports.getData(row)};
    var output = Jaml.render('table', inputobj);

    return output;
};
